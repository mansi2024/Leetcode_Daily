class Solution {
public:
       int leastInterval(vector<char>& tasks, int n){
        int counter[26]={0};
        int maximum=0;
        int maxCount=0;

        for(char task : tasks){
            counter[task-'A']++;
            if(maximum == counter[task-'A']){
                maxCount++;
            }
            else if(maximum<counter[task-'A']){
                maximum=counter[task-'A'];
                maxCount=1;
            }
        }
        int partCount=maximum-1;
        int partLength = n-(maxCount-1);
        int emptySlots = partCount*partLength;
        int availableTasks = tasks.size()-(maximum*maxCount);
        int idles = max(0,emptySlots-availableTasks);

        return tasks.size()+idles;
       }
    // int leastInterval(vector<char>& tasks, int n) {
    //    int freq[26]={0};
    //    for(char &ch:tasks){
    //     freq[ch-'A']++;
    //    }
    //    priority_queue<int>pq;
    //    for(int i=0;i<26;i++){
    //       if(freq[i]>0){
    //         pq.push(freq[i]);
    //       }
    //    }
    //    int time=0;
    //    while(!pq.empty()){
    //     int cycle=n+1;
    //     vector<int>store;
    //     int taskCount=0;

    //     while(cycle-- && !pq.empty()){
    //         if(pq.top()>1){
    //             store.push_back(pq.top()-1);
    //         }
    //         pq.pop();
    //         taskCount++;
    //     }
    //     for(int &x:store){
    //         pq.push(x);
    //     }
    //     time+=(pq.empty()?taskCount:n+1);
    //    }
    //     return time;
    // }
};
